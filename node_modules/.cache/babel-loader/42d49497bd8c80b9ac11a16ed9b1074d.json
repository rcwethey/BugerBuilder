{"ast":null,"code":"var _jsxFileName = \"/Users/ryanwethey/Documents/rcwethey/BugerBuilder/src/containers/Checkout/ContactData/ContactData.js\";\nimport React, { Component } from 'react';\nimport axios from '../../../axios-orders';\nimport styles from './ContactData.module.css';\nimport Button from '../../../components/UI/Button/Button';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\n\nclass ContactData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Name'\n          },\n          value: ''\n        },\n        street: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Street'\n          },\n          value: ''\n        },\n        zipcode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Zip Code'\n          },\n          value: ''\n        },\n        country: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Country'\n          },\n          value: ''\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Your Email'\n          },\n          value: ''\n        },\n        deliveryMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'fastest',\n              displayValue: 'Fastest'\n            }, {\n              value: 'cheapest',\n              displayValue: 'Cheapest'\n            }]\n          },\n          value: ''\n        }\n      },\n      loading: false\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      const updatedOrderForm = { ...this.state.orderForm\n      };\n      const updatedeFormElement = { ...updatedOrderForm[inputIdentifier]\n      };\n      updatedOrderForm.value = event.target.value;\n      updatedOrderForm[inputIdentifier] = updatedeFormElement;\n      this.setState({\n        orderForm: updatedeFormElement\n      });\n    };\n\n    this.orderHandler = event => {\n      event.preventDefault();\n      this.setState({\n        loading: true\n      });\n      const formData = {};\n\n      for (let formElementIdentifier in this.state.orderForm) {\n        formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n      }\n\n      const order = {\n        ingredients: this.props.ingredients,\n        price: this.props.price,\n        orderData: formData\n      };\n      axios.post('/orders.json', order).then(response => {\n        this.setState({\n          loading: false\n        });\n        this.props.history.push('/');\n      }).catch(error => {\n        this.setState({\n          loading: false\n        });\n      });\n    };\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let form = React.createElement(\"form\", {\n      onSubmit: this.orderHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, formElementsArray.map(formElement => React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    })), React.createElement(Button, {\n      btnType: \"Success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"ORDER\"));\n\n    if (this.state.loading) {\n      form = React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: styles.ContactData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"Enter you Contact Data\"), form);\n  }\n\n}\n\nexport default ContactData;","map":{"version":3,"sources":["/Users/ryanwethey/Documents/rcwethey/BugerBuilder/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","axios","styles","Button","Spinner","Input","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","street","zipcode","country","email","deliveryMethod","options","displayValue","loading","inputChangedHandler","event","inputIdentifier","updatedOrderForm","updatedeFormElement","target","setState","orderHandler","preventDefault","formData","formElementIdentifier","order","ingredients","props","price","orderData","post","then","response","history","push","catch","error","render","formElementsArray","key","id","config","form","map","formElement"],"mappings":"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","sourcesContent":["import React, { Component} from 'react';\nimport axios from '../../../axios-orders';\nimport styles from './ContactData.module.css';\nimport Button from '../../../components/UI/Button/Button';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\n\nclass ContactData extends Component {\n  state = {\n     orderForm: {\n       name: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Your Name',\n        },\n        value: ''\n       },\n        street: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Street',\n          },\n          value: ''\n        },\n        zipcode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Zip Code',\n        },\n        value: ''\n        },\n        country: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Country',\n        },\n        value: ''\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Your Email',\n        },\n        value: ''\n        },\n        deliveryMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [\n              {value: 'fastest', displayValue: 'Fastest'},\n              {value: 'cheapest', displayValue: 'Cheapest'} \n            ]\n        },\n        value: ''\n        }\n     },\n    loading: false\n  }\n\n  inputChangedHandler = (event, inputIdentifier) => {\n    const updatedOrderForm = {\n      ...this.state.orderForm\n    };\n    const updatedeFormElement = {\n      ...updatedOrderForm[inputIdentifier]\n    };\n    updatedOrderForm.value = event.target.value;\n    updatedOrderForm[inputIdentifier] = updatedeFormElement;\n    this.setState({orderForm: updatedeFormElement});\n  }\n\n  orderHandler = (event) => {\n    event.preventDefault();\n    this.setState({loading: true});\n    const formData = {};\n    for(let formElementIdentifier in this.state.orderForm) {\n      formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n    }\n    const order = {\n      ingredients: this.props.ingredients,\n      price: this.props.price,\n      orderData: formData\n  }\n    axios.post('/orders.json', order)\n      .then(response => {this.setState({loading: false});\n      this.props.history.push('/');\n    })\n      .catch(error => {this.setState({loading: false});\n    });\n  }\n\n  render() {\n    const formElementsArray = [];\n    for(let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n    \n    let form = (\n      <form onSubmit={this.orderHandler}>\n        {formElementsArray.map(formElement => (\n          <Input\n            key={formElement.id}\n            elementType={formElement.config.elementType} \n            elementConfig={formElement.config.elementConfig} \n            value={formElement.config.value}\n            changed={(event) => this.inputChangedHandler(event, formElement.id)}\n          />\n        ))}\n        <Button btnType=\"Success\" >ORDER</Button>\n      </form>\n    );\n    if(this.state.loading){\n      form = <Spinner />;\n    }\n\n    return (\n      <div className={styles.ContactData}>\n        <h4>Enter you Contact Data</h4>\n        {form}\n      </div>\n    )\n  }\n}\n\nexport default ContactData;"]},"metadata":{},"sourceType":"module"}