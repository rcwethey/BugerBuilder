{"ast":null,"code":"var _jsxFileName = \"/Users/ryanwethey/Documents/rcwethey/BugerBuilder/src/containers/Checkout/ContactData/ContactData.js\";\nimport React, { Component } from 'react';\nimport Button from '../../../components/UI/Button/Button';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport styles from './ContactData.module.css';\nimport axios from '../../../axios-orders';\nimport Input from '../../../components/UI/Input/Input';\n\nclass ContactData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        street: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Street'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        zipCode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'ZIP Code'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 5,\n            maxLength: 5\n          },\n          valid: false,\n          touched: false\n        },\n        country: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Country'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Your E-Mail'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        deliveryMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'fastest',\n              displayValue: 'Fastest'\n            }, {\n              value: 'cheapest',\n              displayValue: 'Cheapest'\n            }]\n          },\n          value: '',\n          valid: false\n        }\n      },\n      formIsValid: false,\n      loading: false\n    };\n\n    this.orderHandler = event => {\n      event.preventDefault();\n      this.setState({\n        loading: true\n      });\n      const formData = {};\n\n      for (let formElementIdentifier in this.state.orderForm) {\n        formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n      }\n\n      const order = {\n        ingredients: this.props.ingredients,\n        price: this.props.price,\n        orderData: formData\n      };\n      axios.post('/orders.json', order).then(response => {\n        this.setState({\n          loading: false\n        });\n        this.props.history.push('/');\n      }).catch(error => {\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      const updatedOrderForm = { ...this.state.orderForm\n      };\n      const updatedFormElement = { ...updatedOrderForm[inputIdentifier]\n      };\n      updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.touched = true;\n      updatedOrderForm[inputIdentifier] = updatedFormElement;\n      let formIsValid = true;\n\n      for (let inputIdentifiers in updatedOrderForm) {\n        formIsValid = updatedOrderForm[inputIdentifiers].valid && formIsValid;\n      }\n\n      this.setState({\n        orderForm: updatedOrderForm,\n        formIsValid: formIsValid\n      });\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLenth) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let form = React.createElement(\"form\", {\n      onSubmit: this.orderHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, formElementsArray.map(formElement => React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    })), React.createElement(Button, {\n      btnType: \"Success\",\n      disabled: !this.state.formIsValid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, \"ORDER\"));\n\n    if (this.state.loading) {\n      form = React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: styles.ContactData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, \"Enter your Contact Data\"), form);\n  }\n\n}\n\nexport default ContactData;","map":{"version":3,"sources":["/Users/ryanwethey/Documents/rcwethey/BugerBuilder/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","Button","Spinner","styles","axios","Input","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","formIsValid","loading","orderHandler","event","preventDefault","setState","formData","formElementIdentifier","order","ingredients","props","price","orderData","post","then","response","history","push","catch","error","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","checkValidity","target","inputIdentifiers","rules","isValid","trim","length","maxLenth","render","formElementsArray","key","id","config","form","map","formElement"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport Button from '../../../components/UI/Button/Button';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport styles from './ContactData.module.css';\nimport axios from '../../../axios-orders';\nimport Input from '../../../components/UI/Input/Input';\n\nclass ContactData extends Component {\n  state = {\n    orderForm: {\n      name: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Your Name'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      street: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Street'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      zipCode: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'ZIP Code'\n        },\n        value: '',\n        validation: {\n          required: true,\n          minLength: 5,\n          maxLength: 5\n        },\n        valid: false,\n        touched: false\n      },\n      country: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Country'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid:false,\n        touched: false\n      },\n      email: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'email',\n          placeholder: 'Your E-Mail'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      deliveryMethod: {\n        elementType: 'select',\n        elementConfig: {\n          options: [\n            {value: 'fastest', displayValue: 'Fastest'},\n            {value: 'cheapest', displayValue: 'Cheapest'}\n          ]\n        },\n        value: '',\n        valid: false\n      }\n    },\n    formIsValid: false,\n    loading: false\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n    if(rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n    if(rules.maxLenth) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n    return isValid;\n  }\n\n  orderHandler = ( event ) => {\n      event.preventDefault();\n      this.setState( { loading: true } );\n      const formData = {};\n      for (let formElementIdentifier in this.state.orderForm) {\n        formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n      }\n      const order = {\n        ingredients: this.props.ingredients,\n        price: this.props.price,\n        orderData: formData\n      }\n      axios.post( '/orders.json', order )\n        .then( response => {\n          this.setState( { loading: false } );\n          this.props.history.push( '/' );\n        } )\n        .catch( error => {\n          this.setState( { loading: false } );\n        } );\n  }\n\n  inputChangedHandler = (event, inputIdentifier) => {\n    const updatedOrderForm = {\n      ...this.state.orderForm\n    };\n    const updatedFormElement = { \n      ...updatedOrderForm[inputIdentifier]\n    };\n    updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n    updatedFormElement.value = event.target.value;\n    updatedFormElement.touched = true;\n    updatedOrderForm[inputIdentifier] = updatedFormElement;\n    let formIsValid = true;\n    for(let inputIdentifiers in updatedOrderForm) {\n      formIsValid = updatedOrderForm[inputIdentifiers].valid && formIsValid;\n    }\n    this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid});\n  }\n\n  render () {\n    const formElementsArray = [];\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let form = (\n      <form onSubmit={this.orderHandler}>\n        {formElementsArray.map(formElement => (\n          <Input \n            key={formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            changed={(event) => this.inputChangedHandler(event, formElement.id)}\n            invalid={!formElement.config.valid}\n            shouldValidate={formElement.config.validation}\n            touched={formElement.config.touched}  />\n        ))}\n        <Button btnType=\"Success\" disabled={!this.state.formIsValid}>ORDER</Button>\n      </form>\n    );\n    if ( this.state.loading ) {\n      form = <Spinner />;\n    }\n    return (\n      <div className={styles.ContactData}>\n        <h4>Enter your Contact Data</h4>\n        {form}\n      </div>\n    );\n  }\n}\n\nexport default ContactData;"]},"metadata":{},"sourceType":"module"}