{"ast":null,"code":"var _jsxFileName = \"/Users/ryanwethey/Documents/rcwethey/BugerBuilder/src/containers/Checkout/ContactData/ContactData.js\";\nimport React, { Component } from 'react';\nimport Button from '../../../components/UI/Button/Button';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport styles from './ContactData.module.css';\nimport axios from '../../../axios-orders';\nimport Input from '../../../components/UI/Input/Input';\n\nclass ContactData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false\n        },\n        street: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Street'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false\n        },\n        zipCode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'ZIP Code'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false\n        },\n        country: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Country'\n          },\n          value: '',\n          validation: {\n            required: true\n          }\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Your E-Mail'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false\n        },\n        deliveryMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'fastest',\n              displayValue: 'Fastest'\n            }, {\n              value: 'cheapest',\n              displayValue: 'Cheapest'\n            }]\n          },\n          value: ''\n        }\n      },\n      loading: false\n    };\n\n    this.orderHandler = event => {\n      event.preventDefault();\n      this.setState({\n        loading: true\n      });\n      const formData = {};\n\n      for (let formElementIdentifier in this.state.orderForm) {\n        formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n      }\n\n      const order = {\n        ingredients: this.props.ingredients,\n        price: this.props.price,\n        orderData: formData\n      };\n      axios.post('/orders.json', order).then(response => {\n        this.setState({\n          loading: false\n        });\n        this.props.history.push('/');\n      }).catch(error => {\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      const updatedOrderForm = { ...this.state.orderForm\n      };\n      const updatedFormElement = { ...updatedOrderForm[inputIdentifier]\n      };\n      updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedFormElement.value = event.target.value;\n      updatedOrderForm[inputIdentifier] = updatedFormElement;\n      this.setState({\n        orderForm: updatedOrderForm\n      });\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = false;\n\n    if (rules.required) {\n      isValid = value.trim() != '';\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let form = React.createElement(\"form\", {\n      onSubmit: this.orderHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, formElementsArray.map(formElement => React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    })), React.createElement(Button, {\n      btnType: \"Success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"ORDER\"));\n\n    if (this.state.loading) {\n      form = React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: styles.ContactData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"Enter your Contact Data\"), form);\n  }\n\n}\n\nexport default ContactData;","map":{"version":3,"sources":["/Users/ryanwethey/Documents/rcwethey/BugerBuilder/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","Button","Spinner","styles","axios","Input","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","street","zipCode","country","email","deliveryMethod","options","displayValue","loading","orderHandler","event","preventDefault","setState","formData","formElementIdentifier","order","ingredients","props","price","orderData","post","then","response","history","push","catch","error","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","checkValidity","target","rules","isValid","trim","render","formElementsArray","key","id","config","form","map","formElement"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport Button from '../../../components/UI/Button/Button';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport styles from './ContactData.module.css';\nimport axios from '../../../axios-orders';\nimport Input from '../../../components/UI/Input/Input';\n\nclass ContactData extends Component {\n  state = {\n    orderForm: {\n      name: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Your Name'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false\n      },\n      street: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Street'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false\n      },\n      zipCode: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'ZIP Code'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false\n      },\n      country: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Country'\n        },\n        value: '',\n        validation: {\n          required: true\n        }\n      },\n      email: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'email',\n          placeholder: 'Your E-Mail'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false\n      },\n      deliveryMethod: {\n        elementType: 'select',\n        elementConfig: {\n          options: [\n            {value: 'fastest', displayValue: 'Fastest'},\n            {value: 'cheapest', displayValue: 'Cheapest'}\n          ]\n        },\n        value: ''\n      }\n    },\n    loading: false\n  }\n\n  checkValidity(value, rules) {\n    let isValid = false;\n    if (rules.required) {\n      isValid = value.trim() != '';\n    }\n    return isValid;\n  }\n\n  orderHandler = ( event ) => {\n      event.preventDefault();\n      this.setState( { loading: true } );\n      const formData = {};\n      for (let formElementIdentifier in this.state.orderForm) {\n        formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n      }\n      const order = {\n        ingredients: this.props.ingredients,\n        price: this.props.price,\n        orderData: formData\n      }\n      axios.post( '/orders.json', order )\n        .then( response => {\n          this.setState( { loading: false } );\n          this.props.history.push( '/' );\n        } )\n        .catch( error => {\n          this.setState( { loading: false } );\n        } );\n  }\n\n  inputChangedHandler = (event, inputIdentifier) => {\n    const updatedOrderForm = {\n      ...this.state.orderForm\n    };\n    const updatedFormElement = { \n      ...updatedOrderForm[inputIdentifier]\n    };\n    updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n    updatedFormElement.value = event.target.value;\n    updatedOrderForm[inputIdentifier] = updatedFormElement;\n    this.setState({orderForm: updatedOrderForm});\n  }\n\n  render () {\n    const formElementsArray = [];\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n    let form = (\n      <form onSubmit={this.orderHandler}>\n        {formElementsArray.map(formElement => (\n          <Input \n            key={formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            changed={(event) => this.inputChangedHandler(event, formElement.id)} />\n        ))}\n        <Button btnType=\"Success\">ORDER</Button>\n      </form>\n    );\n    if ( this.state.loading ) {\n      form = <Spinner />;\n    }\n    return (\n      <div className={styles.ContactData}>\n        <h4>Enter your Contact Data</h4>\n        {form}\n      </div>\n    );\n  }\n}\n\nexport default ContactData;"]},"metadata":{},"sourceType":"module"}